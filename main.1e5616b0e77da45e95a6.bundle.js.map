{"version":3,"file":"main.1e5616b0e77da45e95a6.bundle.js","sources":["webpack:///./src/TreeNode.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport type { TreeNodeProps } from './types';\n\nexport default class TreeNode extends React.PureComponent<TreeNodeProps> {\n    getNodeParams = index => {\n        const { data } = this.props;\n        const { items, additionalData } = data;\n        return Object.assign(items[index], { additionalData });\n    };\n\n    handleClickExpander = (event: SyntheticMouseEvent<HTMLElement>) => {\n        event.stopPropagation();\n        const { data, index } = this.props;\n        const { onNodeExpand, onNodeCollapse } = data;\n\n        if (this.getNodeParams(index).isExpanded) {\n            onNodeCollapse && onNodeCollapse(event, this.getNodeParams(index));\n        } else {\n            onNodeExpand && onNodeExpand(event, this.getNodeParams(index));\n        }\n    };\n\n    renderExpander() {\n        const { data, index } = this.props;\n        const { nodeExpanderComponent: Expander, noExpanderSpaceWidth } = data;\n\n        if (!this.getNodeParams(index).hasChildren) {\n            return <span style={{ width: noExpanderSpaceWidth }} />;\n        }\n\n        return (\n            <Expander\n                {...this.getNodeParams(index)}\n                onClick={this.handleClickExpander}\n                className=\"VTTree__NodeExpander\"\n            />\n        );\n    }\n\n    renderContent() {\n        const { data, index } = this.props;\n\n        const {\n            nodeContentClassName,\n            nodeContentStyle,\n            nodeContentSelector,\n            nodeContentComponent: NodeContentComponent,\n        } = data;\n\n        let optionalClassName;\n        if (nodeContentClassName) {\n            if (typeof nodeContentClassName === 'function') {\n                optionalClassName = nodeContentClassName(this.getNodeParams(index));\n            } else {\n                optionalClassName = nodeContentClassName;\n            }\n        }\n\n        let optionalStyle = {};\n        if (nodeContentStyle) {\n            if (typeof nodeContentStyle === 'function') {\n                optionalStyle = nodeContentStyle(this.getNodeParams(index)) || {};\n            } else {\n                optionalStyle = nodeContentStyle;\n            }\n        }\n\n        const style = optionalStyle;\n        const className = classNames('VTTree__NodeContent', optionalClassName);\n\n        return (\n            <NodeContentComponent style={style} className={className} {...this.getNodeParams(index)}>\n                {nodeContentSelector(this.getNodeParams(index).node)}\n            </NodeContentComponent>\n        );\n    }\n\n    render() {\n        const { data, index, style } = this.props;\n\n        const { levelPadding, nodeClassName, nodeStyle, onNodeClick, onNodeDoubleClick, onNodeContextMenu } = data;\n\n        let className;\n        if (nodeClassName) {\n            if (typeof nodeClassName === 'function') {\n                className = nodeClassName(this.getNodeParams(index));\n            } else {\n                className = nodeClassName;\n            }\n        }\n\n        let optionalStyle = {};\n        if (nodeStyle) {\n            if (typeof nodeStyle === 'function') {\n                optionalStyle = nodeStyle(this.getNodeParams(index)) || {};\n            } else {\n                optionalStyle = nodeStyle;\n            }\n        }\n\n        return (\n            <div\n                className={classNames('VTTree__Node', className)}\n                style={{ ...optionalStyle, ...style, paddingLeft: levelPadding * this.getNodeParams(index).depth }}\n                onClick={onNodeClick && (event => onNodeClick(event, this.getNodeParams(index)))}\n                onDoubleClick={onNodeDoubleClick && (event => onNodeDoubleClick(event, this.getNodeParams(index)))}\n                onContextMenu={onNodeContextMenu && (event => onNodeContextMenu(event, this.getNodeParams(index)))}\n            >\n                {this.renderExpander()}\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n"],"mappings":"AAOA","sourceRoot":""}